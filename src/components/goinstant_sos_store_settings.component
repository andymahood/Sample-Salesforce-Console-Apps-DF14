<apex:component layout="none">

	<apex:includeScript value="/js/functions.js" />
	<apex:includeScript value="/soap/ajax/29.0/connection.js" />

	<c:goinstant_demo_sos_connection_function />
	
    <style>
        .warning {
        	color: #990000;
        	line-height: 200%
        }
    </style>

	<script type='text/javascript'>
    var availableSettings = {};
    
    sforce.connection.sessionId = '{!$Api.Session_ID}';

    function updateSettingsList(err, allSettings) {
        if (err) {
            console.log('error getting settings', err);
            saveInfo('Error loading settings, please refresh', true);
            return;
        }
        
        if (!allSettings) {
            return;
        }
        
        availableSettings = allSettings;
        
        var select = document.getElementById("select_options");
 
        for (settingsName in allSettings) {
            var pos = select.options.length;
            
            if (settingsName === 'Salesforce1' || settingsName === 'Salesforce1_Admin') {
                //pos = 1;
                $('#select_options option[value="new setting"]').after('<option value="'+settingsName+'">'+settingsName+'</option>')

            } else {
            
                select.options[pos] = new Option(settingsName, settingsName);
            }
        }
    }
    
    function storeSettings(e) {
        e.preventDefault();
        
        var name = document.getElementById('settings_name').value;
        if (!name) {
            saveInfo('Name required to save settings', true);
            return;
        }
        
        name = name.replace(/\s/g, '_');
        
        if (!document.getElementById('settings_name').disabled && (name === 'Salesforce1' || name === 'Salesforce1_Admin')) {
            saveInfo('"'+name+'" is a reserved name, change name before saving', true);
            return;
        }
        
        // Check Email
        var email = document.getElementById('user_email').value
        if (email) {
            var q = "SELECT Id FROM Contact WHERE Email = '" + email + "'";
            var qr = sforce.connection.query(q);
            var records = qr.getArray('records');
            if (!records.length) {
                q = "SELECT Id FROM User WHERE Email = '" + email + "'";
                qr = sforce.connection.query(q);
                records = qr.getArray('records');
                
                if (!records.length) {
                    alert('Contact/User Email does not exist');
                    return;
                }
            }
        }
        
        //Check URL
        var url = document.getElementById('start_url').value
        if (url && url.substring(0,4) !== "http") {
            saveInfo('URL appears to be invalid, save failed.');
            return;
        }
        
        
        var settingsKey = giRoom.key('stored/'+name);
        settingsKey.get(function(err, val) {
            if (err) {
                saveInfo('Error checking existing settings, save failed.', true);
                console.log('Error checking key:', name, err);
                return;
            }
            
            var overwrite = false;
            if (val) {
                overwrite = confirm('Overwrite "'+name+'" settings?');
                if (!overwrite) {
                    //notify user it was cancelled ?
                    saveInfo('Save cancelled.');
                    return;
                }
            }
                
            var settingsData = {
                orgId: "{!$Organization.Id}",
                url: url,
                email: email
            };
            
            settingsKey.set(settingsData, function(err) {
                if (err) {
                    console.log('Error saving settings', err);
                    saveInfo('Error storing settings, save failed.');
                    return;
                }
                
                if (name !== 'Salesforce1' && name !== 'Salesforce1') {
                    document.getElementById('delete_button').style.display = 'block';
                }
                
                availableSettings[name] = settingsData;
                document.getElementById('settings_name').value = name;

                if (!overwrite) {
                    var select = document.getElementById("select_options");
                    select.options[select.options.length] = new Option(name, name);
                    select.value = name;
                    saveInfo('New setting "'+name+'" saved.');
                } else {
                    saveInfo('Setting "'+name+'" updated.');
                }
            });
        });
    }
    
    function deleteSettings() {
        var name = document.getElementById('select_options').value;
        if (!confirm('Delete "'+name+'"?')) {
            return;
        }
        
        giRoom.key('stored/'+name).remove(function(err) {
            if (err) {
                saveInfo('Unable to delete settings', true);
                console.log('Delete settings error', err);
                return;
            }
            
            delete availableSettings[name];
            saveInfo('Setting "'+name+'" deleted.');
            $('#select_options option[value != "new setting"]').remove();
            loadStoredList();
            newSetting();
        });
    }
    
    function saveInfo(text, stayOnScreen) {
        var saveInfoEl = $('#save_info');
        saveInfoEl.stop(false, true);
        saveInfoEl.text(text);
        saveInfoEl.show();
        
        if (!stayOnScreen) {
            saveInfoEl.fadeOut(4000);
        }
    }
    
    function selectChanged() {
        var saveInfoEl = $('#save_info');
        saveInfoEl.fadeOut(4000);

        var name = document.getElementById('select_options').value;
        
        if (name === 'new setting') {
            newSetting();
            return;
        } else if (name === 'Salesforce1' || name === 'Salesforce1_Admin') {
            sf1Setting(name);
            return;
        }
        
        //incase sf1 was the last selected
        document.getElementById('start_url').disabled = false;
        document.getElementById('settings_name').disabled = false;        
        document.getElementById('delete_button').style.display = 'block';
        document.getElementById('start_url').value = availableSettings[name].url;
        document.getElementById('user_email').value = availableSettings[name].email;
        document.getElementById('settings_name').value = name;
        document.getElementById('org_id').innerHTML = availableSettings[name].orgId;
        
        if (availableSettings[name].orgId != "{!$Organization.Id}") {
            document.getElementById('change_org').style.display = 'block';
        } else {
            document.getElementById('change_org').style.display = 'none';
        }
    }
    
    function newSetting() {
        //incase sf1 was the last selected
        document.getElementById('start_url').disabled = false;
        document.getElementById('settings_name').disabled = false;
        document.getElementById('select_options').value = 'new setting';
        document.getElementById('delete_button').style.display = 'none';
        document.getElementById('start_url').value = '';
        document.getElementById('user_email').value = '';
        document.getElementById('settings_name').value = '';
        thisOrg();
    }
    
    function sf1Setting(settingName) {
        var settingNameEl = document.getElementById('settings_name');
        settingNameEl.value = settingName;
        settingNameEl.disabled = true;
                
        var startUrlEl = document.getElementById('start_url');
        startUrlEl.value = availableSettings[settingName].url;
        startUrlEl.disabled = true;
        
        document.getElementById('user_email').value = availableSettings[settingName].email || '';

        document.getElementById('delete_button').style.display = 'none';
    }
    
    $(function() {
        var form = document.getElementById('settings_form');
        form.addEventListener('submit', storeSettings, false);
        
        var step6 = document.getElementById('sos_settings_block');
        step6.addEventListener('click', attemptConnect, false);
    });
    
    function giConnectUrl() {
        var q = "SELECT connectUrl__c FROM goinstant_demo_sos_settings__c";
        var qr = sforce.connection.query(q);
        var records = qr.getArray('records');
        var connectUrl = records && records[0] &&records[0].connectUrl__c;
        
        var regEx = /\/sos$/;
        if (!connectUrl || !regEx.test(connectUrl)) {
            alert('Connect URL is invalid, please refer to step 1 & 2.');
            invalidConnectUrl(connectUrl);
            return false;
        }
        
        var accountName = connectUrl.replace('https://goinstant.net/','').replace('/sos','');
        
        document.getElementById('account_name').innerHTML = accountName;
        
        return connectUrl;
    }
    
    var connectAttempted = false;
    function attemptConnect() {
        if (connectAttempted) {
            return;
        }
        giConnect('phone_settings', function(err) {
            if (err) {
                return saveInfo('Unable to connect to GoInstant', true);
            }
            
            connectAttempted = true;
            
            loadStoredList();     
        });
    }

    function loadStoredList() {
        var settingsKey = giRoom.key('stored');
        settingsKey.key('Salesforce1/url').set('https://ap1.salesforce.com/one/one.app', function(err) {
            if(err) {
                console.log('error saving SF1 url', err);
                alert('Error saving Salesforce1 url');
            }

            settingsKey.key('Salesforce1_Admin/url').set('https://login.salesforce.com/one/admin.app', function(err) {
                if(err) {
                    console.log('error saving SF1_Admin url', err);
                    alert('Error saving Salesforce1_Admin url');
                }
                    
                giRoom.key('/stored').get(updateSettingsList); 
            });
        });
    }
    
    function thisOrg() {
        document.getElementById('org_id').innerHTML = "{!$Organization.Id}";
        document.getElementById('change_org').style.display = 'none';
        return false;
    }
    
    function invalidConnectUrl(yourUrl) {
        document.getElementById("select_box").style.display = 'none';
        document.getElementById("settings_form").style.display = 'none';
        document.getElementById('url_error').style.display = 'block';
        document.getElementById('instructions').style.display = 'none';
        document.getElementById('your_url').innerHTML = yourUrl;
    }
</script>
	<p id='instructions'>Now you are ready to create a new Customer
		Setting. This setting will connect your Demo Org to the Salesforce SOS
		app. Simply fill-out all the required fields and these settings will
		be saved for easy demo’ing on your Salesforce SOS app.</p>
	<div id='url_error' style="display: none">
		<p>
			<span class="warning">There appears to me an issue with your
				connect url (see steps 1 &amp; 2).</span> <br />Please note that your
			GoInstant app name must be "sos" (lowercase required).
		</p>

		<table>
			<tr>
				<td><p>Your Connect URL is:</p></td>
				<td><code class="source" id="your_url"></code></td>
			</tr>
			<tr>
				<td><p>Example Connect URL:</p></td>
				<td><code class="source">https://goinstant.net/[ACCOUNT
						NAME]/sos</code></td>
			</tr>
		</table>
		<br />
		<p>Once this issue is resolved please reload this page and open
			step 6.</p>
	</div>
	<div class="select-settings" id='select_box'>
		<div class="control-wrapper">
			<label for="select_options">Saved Settings</label>
			<div class="controls">
				<select id='select_options' onChange='selectChanged();'>
					<option value='new setting'>New Setting</option>
				</select>
				<div style='height: 20px;'>
					<a href='#' onclick='deleteSettings(); return false;'
						id='delete_button'>&times; Remove Selected Setting</a>
				</div>
			</div>
		</div>
	</div>
	<form id="settings_form">
		<div class="control-wrapper">
			<label>Account Name</label>
			<div class="controls">
				<code class="source" id='account_name'></code>
				<small>Please take note of your Account Name. You will be
					required to input this Account Name later during the</small> <small>Salesforce
					SOS app onboarding process.</small>
			</div>
		</div>
		<div class="control-wrapper" style="display: none">
			<label for="">OrgId</label>
			<div class="controls">
				<code class="source" id='org_id'>{!$Organization.Id}</code>
				<div style='height: 20px;'>
					<a id='change_org' onclick='return thisOrg();'
						style='display: none; text-decoration: underline; color: blue;'
						href='#'>Change to Id for this organization</a>
				</div>
			</div>
		</div>
		<div class="control-wrapper">
			<label for="settings_name">Customer Name</label>
			<div class="controls">
				<input type='text' id='settings_name' /> <small>Enter the
					Customer name you are demo’ing to. Later you can select this
					Customer name on the Salesforce</small> <small>SOS app (for 1-click
					demoing!). Example: USAA</small>
			</div>
		</div>
		<div class="control-wrapper">
			<label for="start_url">Start URL</label>
			<div class="controls">
				<input type='text' id='start_url' /> <small>Enter the mobile
					webview of the customer’s site you are wishing to demo. Example: <span>http://mobile.usaa.com</span>
				</small>
			</div>
		</div>
		<div class="control-wrapper">
			<label for="user_email">Contact Email</label>
			<div class="controls">
				<input type='text' id='user_email' /> <small>Enter the
					email of the user you are demoing as. This contact record will be
					screen popped once an SOS</small> <small>session has been
					initiated. Example: <span>lauren.boyle@mybiz.usaa.com</span>
				</small>
			</div>
		</div>
		<div class="form-footer">
			<input class="mybutton" type='submit' value='Save Settings' />
			<div style='height: 20px;'>
				<div id='save_info' style='color: red;'></div>
			</div>
		</div>
	</form>

</apex:component>